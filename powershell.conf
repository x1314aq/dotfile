Import-Module PSReadLine

$PSReadLineOptions = @{
    EditMode = "Emacs"
    HistoryNoDuplicates = $true
    HistorySearchCursorMovesToEnd = $true
    MaximumHistoryCount = 40960
    PredictionSource = "History"
    BellStyle = "None"
    Colors = @{
        "Command" = "`e[93m"
        "Parameter" = "`e[93m"
    }
}
Set-PSReadLineOption @PSReadLineOptions

Set-PSReadLineKeyHandler -Chord Tab -Function Complete
Set-PSReadlineKeyHandler -Chord UpArrow -Function HistorySearchBackward
Set-PSReadlineKeyHandler -Chord DownArrow -Function HistorySearchForward
Set-PSReadlineKeyHandler -Chord Ctrl+w -Function BackwardKillWord
Set-PSReadlineKeyHandler -Chord Ctrl+q -Function UnixWordRubout
Remove-PSReadlineKeyHandler -Chord Alt+Backspace

. "C:\Users\sapphire\ps-completions\_rg.ps1"
. "C:\Users\sapphire\ps-completions\_fd.ps1"

$ps_readline_history = (Get-PSReadLineOption).HistorySavePath

Set-PSReadlineKeyHandler -Chord Ctrl+r -ScriptBlock {
    $ret = Get-Content $ps_readline_history | fzf
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert($ret)
    [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()
}

# PowerShell parameter completion shim for xmake

Register-ArgumentCompleter -Native -CommandName xmake -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $complete = "$wordToComplete"
    if (-not $commandName) {
        $complete = $complete + " "
    }
    $oldenv = $env:XMAKE_SKIP_HISTORY
    $env:XMAKE_SKIP_HISTORY = 1
    xmake lua --root private.utils.complete "0" "nospace" "$complete" | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, 'ParameterValue', $_)
    }
    $env:XMAKE_SKIP_HISTORY = $oldenv
}

function md5sum {
    Get-FileHash -Algorithm MD5 $args
}

function sha1sum {
    Get-FileHash -Algorithm SHA1 $args
}

function sha256sum {
    Get-FileHash -Algorithm SHA256 $args
}

function which($name) {
    Get-Command $name | Select-Object -ExpandProperty Definition
}

function set-tab-title($name) {
    $Host.UI.RawUI.WindowTitle=$name
}

function get-tab-title() {
    $Host.UI.RawUI.WindowTitle
}

function reload-path {
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
}

function start-psadmin {
    Start-Process "wt.exe" -Verb RunAs
}

function nvim {
    C:\Users\sapphire\software\nvim-win64\bin\nvim.exe $args
}
function vim {
    nvim -u NONE -c "packadd onedark.nvim" -c "colorscheme onedark" -c "set nowrap number" $args
}

function open-psconfig {
    vim $PROFILE
}

function code {
    cd C:\Users\sapphire\code
}

function Execute-Command ($Command, $Arguments, $WorkingDirectory) {
    $pinfo = New-Object System.Diagnostics.ProcessStartInfo
    $pinfo.FileName = $Command
    $pinfo.Arguments = $Arguments
    $pinfo.RedirectStandardError = $true
    $pinfo.RedirectStandardOutput = $true
    $pinfo.UseShellExecute = $false
    $pinfo.WorkingDirectory = $WorkingDirectory
    $p = New-Object System.Diagnostics.Process
    $p.StartInfo = $pinfo
    $p.Start() | Out-Null
    return $p
}

function pm-update {
    $pmdir = "C:\Users\sapphire\AppData\Local\nvim-data\site\pack\packer\start"
    $procs = [System.Collections.ArrayList]::new()
    $strs = [System.Collections.ArrayList]::new()

    foreach ($d in Get-ChildItem $pmdir) {
        cd $d
        $br = git branch --show-current
        [void]$strs.Add("Updating $($d.Name) $br")
        $p = Execute-Command "git" "pull origin $br" $d
        [void]$procs.Add($p)
        cd -
    }

    for ($i = 0; $i -lt $procs.count; $i++) {
        Write-Host -Foreground Gree $strs[$i]
        $p = $procs[$i]
        $p.WaitForExit()
        Write-Host $p.StandardOutput.ReadToEnd()
    }
}
